{"ast":null,"code":"export default class HttpClient {\n  constructor(baseURL, authErrorEventBus) {\n    this.baseURL = baseURL;\n    this.authErrorEventBus = authErrorEventBus;\n  } //url: 인자로 전달받는 나머지 경로\n\n\n  async fetch(url, options) {\n    const response = await fetch(`${this.baseURL}${url}`, { ...options,\n      //인자로 받은것을 그대로 복사\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n    let data;\n\n    try {\n      if (options.method !== 'DELETE') {\n        data = await response.json();\n      }\n    } catch (error) {\n      //response에 body가 없는 경우\n      console.error(error);\n    }\n\n    if (response.status > 299 || response.status < 200) {\n      const message = data && data.message ? data.message : 'Sommething went wrong!';\n      const error = new Error(message);\n\n      if (response.status === 401) {\n        this.authErrorEventBus.notify(error);\n        return;\n      }\n\n      throw error;\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/seungmin/Desktop/nodeJS-ex/mini-Twitter/client/src/network/http.js"],"names":["HttpClient","constructor","baseURL","authErrorEventBus","fetch","url","options","response","headers","data","method","json","error","console","status","message","Error","notify"],"mappings":"AAAA,eAAe,MAAMA,UAAN,CAAiB;AAC5BC,EAAAA,WAAW,CAACC,OAAD,EAASC,iBAAT,EAA2B;AAClC,SAAKD,OAAL,GAAaA,OAAb;AACA,SAAKC,iBAAL,GAAuBA,iBAAvB;AACH,GAJ2B,CAM5B;;;AACW,QAALC,KAAK,CAACC,GAAD,EAAKC,OAAL,EAAa;AACpB,UAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAE,GAAE,KAAKF,OAAQ,GAAEG,GAAI,EAAvB,EAAyB,EACjD,GAAGC,OAD8C;AACrC;AACZE,MAAAA,OAAO,EAAC;AACJ,wBAAe,kBADX;AAEJ,WAAGF,OAAO,CAACE;AAFP;AAFyC,KAAzB,CAA5B;AAQA,QAAIC,IAAJ;;AAGC,QAAG;AACA,UAAGH,OAAO,CAACI,MAAR,KAAkB,QAArB,EAA8B;AAC1BD,QAAAA,IAAI,GAAG,MAAMF,QAAQ,CAACI,IAAT,EAAb;AACH;AAEH,KALD,CAKE,OAAMC,KAAN,EAAY;AACX;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACF;;AAGD,QAAGL,QAAQ,CAACO,MAAT,GAAiB,GAAjB,IAAwBP,QAAQ,CAACO,MAAT,GAAgB,GAA3C,EAA+C;AAC5C,YAAMC,OAAO,GAAGN,IAAI,IAAIA,IAAI,CAACM,OAAb,GAAuBN,IAAI,CAACM,OAA5B,GAAsC,wBAAtD;AACA,YAAMH,KAAK,GAAG,IAAII,KAAJ,CAAUD,OAAV,CAAd;;AACA,UAAGR,QAAQ,CAACO,MAAT,KAAkB,GAArB,EAAyB;AACrB,aAAKX,iBAAL,CAAuBc,MAAvB,CAA8BL,KAA9B;AACA;AACH;;AACD,YAAMA,KAAN;AACF;;AAED,WAAOH,IAAP;AACJ;;AAzC2B","sourcesContent":["export default class HttpClient {\n    constructor(baseURL,authErrorEventBus){\n        this.baseURL=baseURL;\n        this.authErrorEventBus=authErrorEventBus;\n    }\n\n    //url: 인자로 전달받는 나머지 경로\n    async fetch(url,options){\n        const response = await fetch(`${this.baseURL}${url}`,{\n            ...options, //인자로 받은것을 그대로 복사\n            headers:{\n                'Content-Type':'application/json',\n                ...options.headers\n            }\n        });\n\n        let data;\n\n\n         try{\n            if(options.method !=='DELETE'){\n                data = await response.json();\n            }\n            \n         } catch(error){\n            //response에 body가 없는 경우\n            console.error(error);\n         }\n\n\n         if(response.status> 299 || response.status<200){\n            const message = data && data.message ? data.message : 'Sommething went wrong!'\n            const error = new Error(message);\n            if(response.status===401){\n                this.authErrorEventBus.notify(error);\n                return;\n            }\n            throw error;\n         }\n\n         return data;\n    }\n\n   \n\n}"]},"metadata":{},"sourceType":"module"}