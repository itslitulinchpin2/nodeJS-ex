{"ast":null,"code":"export default class AuthService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async signup(username, password, name, email, url) {\n    const data = await this.http.fetch('/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password,\n        name,\n        email,\n        url\n      })\n    });\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async login(username, password) {\n    const data = await this.http.fetch('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken();\n    return this.http.fetch('/auth/me', {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  async logout() {\n    return this.tokenStorage.clearToken();\n  }\n\n}","map":{"version":3,"sources":["/Users/seungmin/Desktop/nodeJS-ex/mini-Twitter/client/src/service/auth.js"],"names":["AuthService","constructor","http","tokenStorage","signup","username","password","name","email","url","data","fetch","method","body","JSON","stringify","saveToken","token","login","me","getToken","headers","Authorization","logout","clearToken"],"mappings":"AAAA,eAAe,MAAMA,WAAN,CAAkB;AAE/BC,EAAAA,WAAW,CAACC,IAAD,EAAMC,YAAN,EAAmB;AAC5B,SAAKD,IAAL,GAAUA,IAAV;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;AAEW,QAANC,MAAM,CAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,GAAlC,EAAuC;AACjD,UAAMC,IAAI,GAAG,MAAM,KAAKR,IAAL,CAAUS,KAAV,CAAgB,cAAhB,EAAgC;AACjDC,MAAAA,MAAM,EAAC,MAD0C;AAEjDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,QAAAA,QADmB;AAEnBC,QAAAA,QAFmB;AAGnBC,QAAAA,IAHmB;AAInBC,QAAAA,KAJmB;AAKnBC,QAAAA;AALmB,OAAf;AAF2C,KAAhC,CAAnB;AAUA,SAAKN,YAAL,CAAkBa,SAAlB,CAA4BN,IAAI,CAACO,KAAjC;AAEA,WAAOP,IAAP;AACD;;AAEU,QAALQ,KAAK,CAACb,QAAD,EAAWC,QAAX,EAAqB;AAE9B,UAAMI,IAAI,GAAG,MAAM,KAAKR,IAAL,CAAUS,KAAV,CAAgB,aAAhB,EAA+B;AAChDC,MAAAA,MAAM,EAAC,MADyC;AAEhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACV,QAAAA,QAAD;AAAWC,QAAAA;AAAX,OAAf;AAF0C,KAA/B,CAAnB;AAKA,SAAKH,YAAL,CAAkBa,SAAlB,CAA4BN,IAAI,CAACO,KAAjC;AAEA,WAAOP,IAAP;AACD;;AAEO,QAAFS,EAAE,GAAG;AACT,UAAMF,KAAK,GAAG,KAAKd,YAAL,CAAkBiB,QAAlB,EAAd;AACA,WAAO,KAAKlB,IAAL,CAAUS,KAAV,CAAgB,UAAhB,EAA4B;AACjCC,MAAAA,MAAM,EAAC,KAD0B;AAEjCS,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAG,UAASL,KAAM;AAAhC;AAFwB,KAA5B,CAAP;AAKD;;AAEW,QAANM,MAAM,GAAG;AACb,WAAO,KAAKpB,YAAL,CAAkBqB,UAAlB,EAAP;AACD;;AA9C8B","sourcesContent":["export default class AuthService {\n\n  constructor(http,tokenStorage){\n    this.http=http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async signup(username, password, name, email, url) {\n    const data = await this.http.fetch('/auth/signup', {\n      method:'POST',\n      body: JSON.stringify({\n        username,\n        password,\n        name,\n        email,\n        url\n      })\n    })\n    this.tokenStorage.saveToken(data.token);\n    \n    return data;\n  }\n\n  async login(username, password) {\n\n    const data = await this.http.fetch('/auth/login', {\n      method:'POST',\n      body: JSON.stringify({username, password})\n    }\n    )\n    this.tokenStorage.saveToken(data.token);\n\n    return data;\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken();\n    return this.http.fetch('/auth/me', {\n      method:'GET',\n      headers: {Authorization: `Bearer ${token}`}\n    })\n  \n  }\n\n  async logout() {\n    return this.tokenStorage.clearToken();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}