{"ast":null,"code":"export default class TweetService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async getTweets(username) {\n    console.log('username: ', username);\n    let query = username ? `?username:=${username}` : '';\n    console.log(query);\n\n    if (query !== '') {\n      console.log(\"여기실행\");\n      return this.http.fetch(`/tweets${query}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n    } else {\n      console.log(\"여기는실행되면 안돼\");\n      return this.http.fetch(`/tweets/`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n    }\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets/`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken();\n    return {\n      Authorization: `Bearer ${token}`\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/seungmin/Desktop/nodeJS-ex/mini-Twitter/client/src/service/tweet.js"],"names":["TweetService","constructor","http","tokenStorage","getTweets","username","console","log","query","fetch","method","headers","getHeaders","postTweet","text","body","JSON","stringify","deleteTweet","tweetId","updateTweet","token","getToken","Authorization"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAMC,YAAN,EAAoB;AAC7B,SAAKD,IAAL,GAAUA,IAAV;AACA,SAAKC,YAAL,GAAkBA,YAAlB;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,QAA1B;AACA,QAAIG,KAAK,GAAGH,QAAQ,GAAI,cAAaA,QAAS,EAA1B,GAA8B,EAAlD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;;AACA,QAAIA,KAAK,KAAG,EAAZ,EAAe;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACF,aAAO,KAAKL,IAAL,CAAUO,KAAV,CAAiB,UAASD,KAAM,EAAhC,EAAmC;AACxCE,QAAAA,MAAM,EAAE,KADgC;AAExCC,QAAAA,OAAO,EAAE,KAAKC,UAAL;AAF+B,OAAnC,CAAP;AAGI,KALJ,MAKU;AACRN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,aAAO,KAAKL,IAAL,CAAUO,KAAV,CAAiB,UAAjB,EAA4B;AACjCC,QAAAA,MAAM,EAAE,KADyB;AAEjCC,QAAAA,OAAO,EAAE,KAAKC,UAAL;AAFwB,OAA5B,CAAP;AAID;AACF;;AAEc,QAATC,SAAS,CAACC,IAAD,EAAO;AACpB,WAAO,KAAKZ,IAAL,CAAUO,KAAV,CAAiB,UAAjB,EAA4B;AACjCC,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAFwB;AAGjCG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBH,QAAAA;AADmB,OAAf;AAH2B,KAA5B,CAAP;AAOD;;AAEgB,QAAXI,WAAW,CAACC,OAAD,EAAU;AACzB,WAAO,KAAKjB,IAAL,CAAUO,KAAV,CAAiB,WAAUU,OAAQ,EAAnC,EAAsC;AAC3CT,MAAAA,MAAM,EAAE,QADmC;AAE3CC,MAAAA,OAAO,EAAE,KAAKC,UAAL;AAFkC,KAAtC,CAAP;AAID;;AAEgB,QAAXQ,WAAW,CAACD,OAAD,EAAUL,IAAV,EAAgB;AAC/B,WAAO,KAAKZ,IAAL,CAAUO,KAAV,CAAiB,WAAUU,OAAQ,EAAnC,EAAsC;AAC3CT,MAAAA,MAAM,EAAE,KADmC;AAE3CC,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAFkC;AAG3CG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA;AAAF,OAAf;AAHqC,KAAtC,CAAP;AAKD;;AAEDF,EAAAA,UAAU,GAAE;AACV,UAAMS,KAAK,GAAG,KAAKlB,YAAL,CAAkBmB,QAAlB,EAAd;AACA,WAAM;AACJC,MAAAA,aAAa,EAAE,UAASF,KAAM;AAD1B,KAAN;AAGD;;AAtD+B","sourcesContent":["export default class TweetService {\n  constructor(http,tokenStorage) {\n    this.http=http;\n    this.tokenStorage=tokenStorage;\n  }\n\n  async getTweets(username) {\n    console.log('username: ', username);\n    let query = username ? `?username:=${username}` : '';\n    console.log(query);\n    if (query!==''){\n      console.log(\"여기실행\");\n    return this.http.fetch(`/tweets${query}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });} else {\n      console.log(\"여기는실행되면 안돼\")\n      return this.http.fetch(`/tweets/`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n    }\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets/`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text,\n      }),\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  getHeaders(){\n    const token = this.tokenStorage.getToken();\n    return{\n      Authorization:`Bearer ${token}`,\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}