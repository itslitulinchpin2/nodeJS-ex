{"ast":null,"code":"export default class TweetService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async getTweets(username) {\n    let query = username ? `?username=${username}` : '';\n    return this.http.fetch(`/tweets${query}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets/`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text,\n        username: 'ellie',\n        name: 'Ellie'\n      })\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken();\n    return {\n      Authorization: `Bearer ${token}`\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/seungmin/Desktop/nodeJS-ex/mini-Twitter/client/src/service/tweet.js"],"names":["TweetService","constructor","http","tokenStorage","getTweets","username","query","fetch","method","headers","getHeaders","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet","token","getToken","Authorization"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAMC,YAAN,EAAoB;AAC7B,SAAKD,IAAL,GAAUA,IAAV;AACA,SAAKC,YAAL,GAAkBA,YAAlB;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,QAAIC,KAAK,GAAGD,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAjD;AACA,WAAO,KAAKH,IAAL,CAAUK,KAAV,CAAiB,UAASD,KAAM,EAAhC,EAAmC;AACxCE,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,OAAO,EAAE,KAAKC,UAAL;AAF+B,KAAnC,CAAP;AAID;;AAEc,QAATC,SAAS,CAACC,IAAD,EAAO;AACpB,WAAO,KAAKV,IAAL,CAAUK,KAAV,CAAiB,UAAjB,EAA4B;AACjCC,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAFwB;AAGjCG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBH,QAAAA,IADmB;AAEnBP,QAAAA,QAAQ,EAAE,OAFS;AAGnBW,QAAAA,IAAI,EAAE;AAHa,OAAf;AAH2B,KAA5B,CAAP;AASD;;AAEgB,QAAXC,WAAW,CAACC,OAAD,EAAU;AACzB,WAAO,KAAKhB,IAAL,CAAUK,KAAV,CAAiB,WAAUW,OAAQ,EAAnC,EAAsC;AAC3CV,MAAAA,MAAM,EAAE,QADmC;AAE3CC,MAAAA,OAAO,EAAE,KAAKC,UAAL;AAFkC,KAAtC,CAAP;AAID;;AAEgB,QAAXS,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,WAAO,KAAKV,IAAL,CAAUK,KAAV,CAAiB,WAAUW,OAAQ,EAAnC,EAAsC;AAC3CV,MAAAA,MAAM,EAAE,KADmC;AAE3CC,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAFkC;AAG3CG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA;AAAF,OAAf;AAHqC,KAAtC,CAAP;AAKD;;AAEDF,EAAAA,UAAU,GAAE;AACV,UAAMU,KAAK,GAAG,KAAKjB,YAAL,CAAkBkB,QAAlB,EAAd;AACA,WAAM;AACJC,MAAAA,aAAa,EAAE,UAASF,KAAM;AAD1B,KAAN;AAGD;;AA9C+B","sourcesContent":["export default class TweetService {\n  constructor(http,tokenStorage) {\n    this.http=http;\n    this.tokenStorage=tokenStorage;\n  }\n\n  async getTweets(username) {\n    let query = username ? `?username=${username}` : '';\n    return this.http.fetch(`/tweets${query}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets/`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text,\n        username: 'ellie',\n        name: 'Ellie',\n      }),\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  getHeaders(){\n    const token = this.tokenStorage.getToken();\n    return{\n      Authorization:`Bearer ${token}`,\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}