{"ast":null,"code":"export default class TweetService {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        username: 'lee',\n        name: \"Lee\"\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/seungmin/Desktop/nodeJS-ex/mini-Twitter/client/src/service/tweet.js"],"names":["TweetService","constructor","baseURL","getTweets","username","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAEhCC,EAAAA,WAAW,CAACC,OAAD,EAAS;AAClB,SAAKA,OAAL,GAAaA,OAAb;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,UAAMC,KAAK,GAAGD,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,UAASG,KAAM,EAAhC,EAAkC;AAC5DG,MAAAA,MAAM,EAAE,KADoD;AAE5DC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB;AAFmD,KAAlC,CAA5B;AAKA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAGL,QAAQ,CAACM,MAAT,KAAmB,GAAtB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AAED;;AAEc,QAATK,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,SAAjB,EAA0B;AACpDM,MAAAA,MAAM,EAAE,MAD4C;AAEpDC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OAF2C;AAGpDQ,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAClBH,QAAAA,IADkB;AACbZ,QAAAA,QAAQ,EAAC,KADI;AACGgB,QAAAA,IAAI,EAAC;AADR,OAAf;AAH+C,KAA1B,CAA5B;AAQA,UAAMV,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAGL,QAAQ,CAACM,MAAT,KAAmB,GAAtB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEgB,QAAXW,WAAW,CAACC,OAAD,EAAU;AAEzB,UAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,WAAUoB,OAAQ,EAAnC,EAAqC;AAC/Dd,MAAAA,MAAM,EAAE,QADuD;AAE/DC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB;AAFsD,KAArC,CAA5B;;AAMA,QAAGH,QAAQ,CAACM,MAAT,KAAmB,GAAtB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,EAAN;AACD;AAEF;;AAEgB,QAAXU,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,WAAUoB,OAAQ,EAAnC,EAAqC;AAC/Dd,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OAFsD;AAG/DQ,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAClBH,QAAAA;AADkB,OAAf;AAH0D,KAArC,CAA5B;AAQA,UAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAGL,QAAQ,CAACM,MAAT,KAAmB,GAAtB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAjE+B","sourcesContent":["export default class TweetService {\n  \n  constructor(baseURL){\n    this.baseURL=baseURL;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`,{\n      method: \"GET\",\n      headers: {'Content-Type':'application/json'},\n    })\n\n    const data = await response.json();\n    if(response.status !==200){\n      throw new Error(data.message);\n    }\n    return data;\n   \n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`,{\n      method: \"POST\",\n      headers: {'Content-Type':'application/json'},\n      body:JSON.stringify({\n        text,username:'lee', name:\"Lee\"\n      })\n    })\n\n    const data = await response.json();\n    if(response.status !==201){\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    \n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`,{\n      method: \"DELETE\",\n      headers: {'Content-Type':'application/json'},\n    })\n\n    \n    if(response.status !==204){\n      throw new Error();\n    }\n\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`,{\n      method: \"PUT\",\n      headers: {'Content-Type':'application/json'},\n      body:JSON.stringify({\n        text\n      })\n    })\n\n    const data = await response.json();\n    if(response.status !==200){\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}